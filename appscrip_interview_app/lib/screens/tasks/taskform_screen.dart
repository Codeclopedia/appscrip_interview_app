import 'package:appscrip_interview_app/models/todomodel.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../providers/task_provider.dart';

class TaskFormScreen extends ConsumerStatefulWidget {
  final Todo? task;

  const TaskFormScreen({this.task});

  @override
  _TaskFormScreenState createState() => _TaskFormScreenState();
}

class _TaskFormScreenState extends ConsumerState<TaskFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  DateTime? _dueDate;
  String? _priority;
  String? _status;
  int? _assignedUserId;

  @override
  void initState() {
    super.initState();
    if (widget.task != null) {
      _titleController.text = widget.task?.title ?? '';
      // _descriptionController.text = widget.task!.description;
      // _dueDate = widget.task!.dueDate;
      // _priority = widget.task!.priority;
      // _status = widget.task!.status;
      // _assignedUserId = widget.task!.assignedUserId;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.task == null ? 'Create Task' : 'Edit Task'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'Title'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              // Add more fields for due date, priority, status, and assigned user
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    final task = Todo(
                      id: widget.task?.id ?? 0, // Auto-generated by the API
                      title: _titleController.text,
                      // description: _descriptionController.text,
                      // dueDate: _dueDate ?? DateTime.now(), // Default to current date
                      // priority: _priority ?? 'Medium', // Default priority
                      // status: _status ?? 'To-Do', // Default status
                      // assignedUserId: _assignedUserId ?? 1, // Default assigned user
                    );

                    try {
                      if (widget.task == null) {
                        await ref.read(taskProvider.notifier).createTask(task);
                      } else {
                        await ref.read(taskProvider.notifier).updateTask(task);
                      }
                      if (mounted) {
                        Navigator.pop(context);
                      }
                    } catch (e) {
                      if (mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content:
                                Text("Failed to save task: ${e.toString()}"),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    }
                  }
                },
                child:
                    Text(widget.task == null ? 'Create Task' : 'Update Task'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
